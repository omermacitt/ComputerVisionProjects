# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'interface3.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import cv2 as cv
import os
from webcam_operations import *
from PyQt5.QtGui import QPixmap, QImage

os.environ[
    "QT_QPA_PLATFORM_PLUGIN_PATH"] = "/home/developer/anaconda3/envs/computerVision/lib/python3.12/site-packages/cv2/qt/plugins/platforms"


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1161, 839)
        self.timer = QtCore.QTimer()
        self.timer.timeout.connect(self.update_frame)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.video = QtWidgets.QLabel(self.centralwidget)
        self.video.setGeometry(QtCore.QRect(10, 0, 1141, 491))
        self.video.setText("")
        self.video.setObjectName("video")
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(0, 590, 1161, 41))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.start_button = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.start_button.setObjectName("start_button")
        self.horizontalLayout.addWidget(self.start_button)
        self.stop_button = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.stop_button.setObjectName("stop_button")
        self.horizontalLayout.addWidget(self.stop_button)
        self.record_button = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.record_button.setObjectName("record_button")
        self.horizontalLayout.addWidget(self.record_button)
        self.horizontalLayoutWidget_2 = QtWidgets.QWidget(self.centralwidget)
        self.horizontalLayoutWidget_2.setGeometry(QtCore.QRect(0, 500, 1151, 80))
        self.horizontalLayoutWidget_2.setObjectName("horizontalLayoutWidget_2")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_2)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.widget = QtWidgets.QWidget(self.horizontalLayoutWidget_2)
        self.widget.setObjectName("widget")
        self.edge_slider = QtWidgets.QLabel(self.widget)
        self.edge_slider.setGeometry(QtCore.QRect(0, 0, 81, 19))
        self.edge_slider.setObjectName("edge_slider")
        self.edge_slider_object = QtWidgets.QSlider(self.widget)
        self.edge_slider_object.setGeometry(QtCore.QRect(10, 40, 561, 16))
        self.edge_slider_object.setOrientation(QtCore.Qt.Horizontal)
        self.edge_slider_object.setObjectName("edge_slider_object")
        self.horizontalLayout_2.addWidget(self.widget)
        self.widget_2 = QtWidgets.QWidget(self.horizontalLayoutWidget_2)
        self.widget_2.setObjectName("widget_2")
        self.blur_slider = QtWidgets.QLabel(self.widget_2)
        self.blur_slider.setGeometry(QtCore.QRect(0, 0, 81, 19))
        self.blur_slider.setObjectName("blur_slider")
        self.blur_slider_object = QtWidgets.QSlider(self.widget_2)
        self.blur_slider_object.setGeometry(QtCore.QRect(10, 40, 551, 16))
        self.blur_slider_object.setOrientation(QtCore.Qt.Horizontal)
        self.blur_slider_object.setObjectName("blur_slider_object")
        self.blur_slider_object.setMinimum(1)
        self.blur_slider_object.setMaximum(51)  # ya da ihtiyaç duyduğun başka bir üst sınır
        self.blur_slider_object.setSingleStep(2)  # her adımda 2 ekleyip, sadece tek sayıları dolaş
        self.horizontalLayout_2.addWidget(self.widget_2)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1161, 24))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.start_button.clicked.connect(self.click_start_button)
        self.stop_button.clicked.connect(self.click_stop_button)
        self.record_button.clicked.connect(self.click_record_button)
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.start_button.setText(_translate("MainWindow", "Start"))
        self.stop_button.setText(_translate("MainWindow", "Stop"))
        self.record_button.setText(_translate("MainWindow", "Record"))
        self.edge_slider.setText(_translate("MainWindow", "Edge Slider"))
        self.blur_slider.setText(_translate("MainWindow", "Blur Slider"))
    def click_start_button(self):
        self.capture = cv.VideoCapture("https://192.168.1.8:8080/video")
        self.timer.start(30)  # yaklaşık 30 fps
        print(self.edge_slider_object.value())
        print(self.blur_slider_object.value())

    def click_stop_button(self):
        self.capture = None
        self.timer.stop()
        self.video.clear()

    def click_record_button(self):
        print("record")
    def update_frame(self):
        if self.capture is not None and self.capture.isOpened():
            success, frame = self.capture.read()
            if success:
                frame = detect_face(frame, int(self.edge_slider_object.value()),
                                    int(self.blur_slider_object.value()))  # blurlu şekilde göster
                qt_img = self.convert_frame_to_qt(frame)
                self.video.setPixmap(QPixmap.fromImage(qt_img))
    def convert_frame_to_qt(self, frame):
        rgb_image = cv.cvtColor(frame, cv.COLOR_BGR2RGB)
        h, w, ch = rgb_image.shape
        bytes_per_line = ch * w
        qt_image = QImage(rgb_image.data, w, h, bytes_per_line, QImage.Format_RGB888)
        return qt_image
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
